# Zepto Clone - Data Structure & Mock API

## Data Models

### 1. User
```json
{
  "id": "u123",
  "name": "John Doe",
  "email": "john@example.com",
  "phone": "+1234567890",
  "addresses": [
    {
      "id": "addr1",
      "type": "home",
      "address": "123 Main St, Apt 4B",
      "city": "New York",
      "state": "NY",
      "zipCode": "10001",
      "isDefault": true
    }
  ],
  "paymentMethods": [
    {
      "id": "pm1",
      "type": "card",
      "last4": "4242",
      "expiryMonth": 12,
      "expiryYear": 2025,
      "isDefault": true
    }
  ]
}
```

### 2. Category
```json
{
  "id": "c1",
  "name": "Fruits & Vegetables",
  "image": "/images/categories/fruits.jpg",
  "description": "Fresh fruits and vegetables",
  "priority": 1
}
```

### 3. Product
```json
{
  "id": "p123",
  "name": "Fresh Red Apples",
  "description": "Sweet and juicy red apples, perfect for eating fresh or baking.",
  "categoryId": "c1",
  "price": 2.99,
  "originalPrice": 3.49,
  "discountPercentage": 15,
  "unit": "500g",
  "inStock": true,
  "stockQuantity": 50,
  "images": ["/images/products/apple1.jpg", "/images/products/apple2.jpg"],
  "tags": ["organic", "fresh", "fruits"],
  "nutritionalInfo": {
    "calories": 110,
    "protein": "2g",
    "carbs": "25g",
    "fat": "0g"
  },
  "rating": 4.5,
  "reviewCount": 128
}
```

### 4. Cart
```json
{
  "id": "cart123",
  "userId": "u123",
  "items": [
    {
      "productId": "p123",
      "quantity": 2,
      "price": 2.99
    },
    {
      "productId": "p456",
      "quantity": 1,
      "price": 1.49
    }
  ],
  "subtotal": 7.47,
  "deliveryFee": 1.99,
  "total": 9.46,
  "couponCode": null,
  "discount": 0
}
```

### 5. Order
```json
{
  "id": "o123",
  "userId": "u123",
  "orderNumber": "ZEP12345",
  "items": [
    {
      "productId": "p123",
      "name": "Fresh Red Apples",
      "quantity": 2,
      "price": 2.99,
      "total": 5.98
    },
    {
      "productId": "p456",
      "name": "Organic Milk",
      "quantity": 1,
      "price": 1.49,
      "total": 1.49
    }
  ],
  "subtotal": 7.47,
  "deliveryFee": 1.99,
  "discount": 0,
  "total": 9.46,
  "paymentMethod": {
    "type": "card",
    "last4": "4242"
  },
  "deliveryAddress": {
    "address": "123 Main St, Apt 4B",
    "city": "New York",
    "state": "NY",
    "zipCode": "10001"
  },
  "status": "out_for_delivery",
  "placedAt": "2023-04-25T14:30:00Z",
  "estimatedDelivery": "2023-04-25T14:45:00Z",
  "deliveryPartner": {
    "id": "dp1",
    "name": "John D.",
    "phone": "+1987654321",
    "rating": 4.8
  },
  "tracking": {
    "stages": [
      {
        "status": "order_placed",
        "timestamp": "2023-04-25T14:30:00Z",
        "completed": true
      },
      {
        "status": "order_packed",
        "timestamp": "2023-04-25T14:35:00Z",
        "completed": true
      },
      {
        "status": "out_for_delivery",
        "timestamp": "2023-04-25T14:38:00Z",
        "completed": true
      },
      {
        "status": "delivered",
        "timestamp": null,
        "completed": false
      }
    ],
    "currentLocation": {
      "lat": 40.7128,
      "lng": -74.006
    }
  }
}
```

## Mock API Endpoints

### Authentication
- `POST /api/auth/register` - Register a new user
- `POST /api/auth/login` - User login
- `POST /api/auth/verify-otp` - Verify OTP for phone number
- `GET /api/auth/me` - Get current user info

### Categories
- `GET /api/categories` - Get all categories
- `GET /api/categories/:id` - Get category by ID
- `GET /api/categories/:id/products` - Get products by category

### Products
- `GET /api/products` - Get all products (with pagination)
- `GET /api/products/search?q=query` - Search products
- `GET /api/products/:id` - Get product by ID
- `GET /api/products/featured` - Get featured products
- `GET /api/products/deals` - Get products with deals/discounts

### Cart
- `GET /api/cart` - Get user's cart
- `POST /api/cart/items` - Add item to cart
- `PUT /api/cart/items/:productId` - Update item quantity
- `DELETE /api/cart/items/:productId` - Remove item from cart
- `DELETE /api/cart/clear` - Clear entire cart
- `POST /api/cart/apply-coupon` - Apply coupon to cart

### Orders
- `POST /api/orders` - Create a new order
- `GET /api/orders` - Get user's order history
- `GET /api/orders/:id` - Get order details
- `GET /api/orders/:id/tracking` - Get order tracking info

### User Profile
- `GET /api/user/addresses` - Get user addresses
- `POST /api/user/addresses` - Add new address
- `PUT /api/user/addresses/:id` - Update address
- `DELETE /api/user/addresses/:id` - Delete address
- `GET /api/user/payment-methods` - Get user payment methods
- `POST /api/user/payment-methods` - Add new payment method
- `DELETE /api/user/payment-methods/:id` - Delete payment method

## Express Mock API Implementation

```javascript
// server.js
const express = require('express');
const cors = require('cors');
const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());

// Import mock data
const users = require('./data/users.json');
const products = require('./data/products.json');
const categories = require('./data/categories.json');
const orders = require('./data/orders.json');

// Track active carts in memory
let carts = {};

// Routes
app.use('/api/auth', require('./routes/auth'));
app.use('/api/categories', require('./routes/categories'));
app.use('/api/products', require('./routes/products'));
app.use('/api/cart', require('./routes/cart'));
app.use('/api/orders', require('./routes/orders'));
app.use('/api/user', require('./routes/user'));

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

### Sample Route Implementation

```javascript
// routes/products.js
const express = require('express');
const router = express.Router();
const products = require('../data/products.json');

// Get all products with pagination
router.get('/', (req, res) => {
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 10;
  const startIndex = (page - 1) * limit;
  const endIndex = page * limit;
  
  const results = {
    products: products.slice(startIndex, endIndex),
    pagination: {
      total: products.length,
      pages: Math.ceil(products.length / limit),
      currentPage: page
    }
  };
  
  res.json(results);
});

// Search products
router.get('/search', (req, res) => {
  const query = req.query.q.toLowerCase();
  const results = products.filter(product => 
    product.name.toLowerCase().includes(query) || 
    product.description.toLowerCase().includes(query)
  );
  
  res.json(results);
});

// Get product by ID
router.get('/:id', (req, res) => {
  const product = products.find(p => p.id === req.params.id);
  
  if (!product) {
    return res.status(404).json({ message: 'Product not found' });
  }
  
  res.json(product);
});

// Get featured products
router.get('/featured', (req, res) => {
  const featured = products.filter(p => p.featured === true).slice(0, 10);
  res.json(featured);
});

// Get deals
router.get('/deals', (req, res) => {
  const deals = products.filter(p => p.discountPercentage > 0)
    .sort((a, b) => b.discountPercentage - a.discountPercentage)
    .slice(0, 10);
  
  res.json(deals);
});

module.exports = router;
```